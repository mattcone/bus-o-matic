{"name":"Bus-o-matic","tagline":"A simple Ruby wrapper for the Pittsburgh Port Authority API ","body":"Bus-o-matic is a simple Ruby wrapper for the [Pittsburgh Port Authority API] \r\n(http://www.portauthority.org/paac/CompanyInfoProjects/DeveloperResources.aspx).\r\nThis gem allows you to retrieve real-time information about vehicles, routes, \r\nstops, and predicted arrival times for buses in Pittsburgh, Pennsylvania.\r\nThis gem borrows heavily from [cta-api] (https://github.com/fbonetti/cta-api)\r\nby [Frank Bonetti] (https://github.com/fbonetti). \r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n```ruby\r\ngem 'bus-o-matic'\r\n```\r\n\r\n## Setup\r\n\r\nBefore using Bus-o-matic, you'll need to request an API key from the [Port \r\nAuthority] (http://www.portauthority.org/paac/CompanyInfoProjects/DeveloperResources.aspx). \r\nRequire the gem and add your Port Authority API key. This can be put in an initializer.\r\n\r\n```ruby\r\nrequire 'bus-o-matic'\r\n\r\nkey = \"xxxxxxxxxxxxxxxxxxxx\"\r\nPIT::Busomatic.key = key\r\n```\r\n\r\n## Usage\r\n\r\nThe following examples illustrate how you can use Bus-o-matic.\r\n\r\n### Routes and Stops\r\n\r\nBus-o-matic can list all of the routes available. You can also get the \r\ndirections for a particular route, and a list all of the stops on a route.\r\n\r\n```ruby\r\n\r\n# Retrieve a list of all available routes\r\nPIT::Busomatic.routes\r\n\r\n# Retrieve the available directions for the specified route (INBOUND, OUTBOUND, etc.)\r\nPIT::Busomatic.directions :rt => 16\r\n\r\n# Retrieve the stops for Route 16 heading Inbound\r\nPIT::Busomatic.stops :rt => 16, :dir => :INBOUND\r\n```\r\n\r\nNote that the available directions (INBOUND, etc.) appear to be case sensitive. \r\n\r\n### Patterns\r\n\r\nBus-o-matic can retrieve a set of geo-positional points for a route, something \r\nknown as a \"pattern.\" Patterns can be used to outline routes on maps.\r\n\r\n```ruby\r\n# Retrieve the pattern for Route 16\r\nPIT::Busomatic.patterns :rt => 16\r\n```\r\n\r\n### Vehicles\r\n\r\nBus-o-matic can find all of the vehicles that are currently active on a route, \r\nor retrieve information about a specific vehicle. The first step is finding \r\nthe active vehicles on a route.\r\n\r\n```ruby\r\n# Returns an array of vehicles that are active on Route 16.\r\nPIT::Busomatic.vehicles :rt => 16\r\n```\r\n\r\nYou can retrieve information for vehicles on more than one route. Up to 10 \r\nroutes can be specified at once.\r\n\r\n```ruby\r\n# Returns an array of vehicles that are active on Routes 13, 16, and 17.\r\nPIT::Busomatic.vehicles :rt => [\"16\",\"17\",\"13\"]\r\n```\r\n\r\nYou can also find information about one or more vehicles that are currently\r\nactive. Up to 10 vehicle IDs can be specified at once.\r\n\r\n```ruby\r\n# Returns information about a specific vehicle.\r\nPIT::Busomatic.vehicles :vid => 6013\r\n\r\n# Returns information about multiple vehicles.\r\nPIT::Busomatic.vehicles :vid => [\"6013\",\"6001\"]\r\n```\r\n\r\nNote that you cannot combine both the `rt` and `vid` parameters in a single \r\nrequest.\r\n\r\n### Predicted Arrival Times\r\n\r\nBus-o-matic can return predicted arrival times for one or more buses. Up to 10 \r\nvehicle IDs can be specified at once. Note that you cannot combine both `vid` \r\nand `stpid` parameters in a single request.\r\n\r\n```ruby\r\n# Returns predictions for a single vehicle.\r\nPIT::Busomatic.predictions :vid => 5629\r\n\r\n# Returns predictions for multiple vehicles. \r\nPIT::Busomatic.predictions :vid => [\"5629\",\"5604\"]\r\n```\r\n\r\nYou can also retrieve predictions for one or more stops. Up to 10 stop IDs can \r\nbe specified at once. You can combine the `stpid` and `rt` parameters, as shown\r\nbelow.\r\n\r\n```ruby\r\n\r\n# Returns predictions for all buses on all applicable routes for single stop.\r\nPIT::Busomatic.predictions :stpid => 1326\r\n\r\n# Returns predictions for multiple stops.\r\nPIT::Busomatic.predictions :stpid => [\"1326\",\"18320\",\"18563\"]\r\n\r\n# Returns predictions for all buses on Route 16 for a single stop \r\nPIT::Busomatic.predictions :stpid => 1326, :rt => 16\r\n\r\n# Returns predictions for buses on Routes 13, 16, and 17 for Stop 1326.\r\nPIT::Busomatic.predictions :stpid => 1326, :rt => [\"13\",\"16\",\"17\"]\r\n```\r\n\r\n### System Time\r\n\r\nReturns the official Port Authority API system time. \r\n\r\n```ruby\r\nPIT::Busomatic.time\r\n```\r\n\r\n\r\n## Contributing\r\n\r\nThis is my first Ruby gem, so I'd appreciate you reporting issues or creating \r\npull requests. \r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Add some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create a new Pull Request\r\n\r\n\r\n## License\r\n\r\nCopyright (c) 2015 Matt Cone and 2013 fbonetti.\r\n\r\nThe MIT License (MIT). See the LICENSE.txt file for details.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}